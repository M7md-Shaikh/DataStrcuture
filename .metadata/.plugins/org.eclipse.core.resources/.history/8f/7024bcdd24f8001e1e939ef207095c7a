package application;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import java.util.Date;

import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;



public class PalestineMartyrs {
	
	private NodeD firstD;
    private NodeDS firstDS;
    private NodeSS firstSS;
	
	public BorderPane bpD ;
	public BorderPane bpL ;
	private int count ; 
	Random random = new Random();
	Label label = new Label();
	public String filePath;
	
	// for District Screen
	Button bID = new Button("Insert District");
	TextField tfID = new TextField();
	Button bUD = new Button("Update District");
	TextArea taD = new TextArea();
	Button bDD = new Button("Delete District");
	TextField tfDD = new TextField();
	Button bSD = new Button("Search Districts"); // for showing all districs 
	TextField tfSD = new TextField();
	Button bNMD = new Button("Number of Martyr");
	Label lM = new Label();
	Button bLLD = new Button("Load Location in Loc Sc");
	
	
	// for Location Screen 
	Label lDL = new Label("         District");
	Label lLL = new Label("            Location");
	Button bIL = new Button("Insert Location");
	TextField tfIDL = new TextField();
	TextField tfIL = new TextField();
	Button bUL = new Button("Update Location");
	TextArea taU = new TextArea();
	Button bDL = new Button("Delete Location");
	TextField tfDDL = new TextField();
	TextField tfDL = new TextField();
	Button bSL = new Button("Search Locations");
	TextField tfSLL = new TextField();
	TextArea taL = new TextArea();
	Button bIML = new Button("Insert Martyr");
	TextField tfIMDL = new TextField();
	TextField tfIMLL = new TextField();
	TextField tfIML = new TextField();
	Button bUML = new Button("Update Martyr");
	Button bSML = new Button("Search Martyr");// by part of his name 
	TextField tfSML = new TextField();
	Button bNL = new Button("Next");
	Button bND = new Button("Next >>");
	Button bPD = new Button("<< Prev ");
	
	
	
	public PalestineMartyrs() {
		count =0;
		bNL.setMaxWidth(150);
		bID.setMaxWidth(150);
		bUD.setMaxWidth(150);
		bDD.setMaxWidth(150);
		bSD.setMaxWidth(150);
		bNMD.setMaxWidth(150);
		bLLD.setMaxWidth(150);
		bIL.setMaxWidth(150);
		bUL.setMaxWidth(150);
		bDL.setMaxWidth(150);
		bSL.setMaxWidth(150);
		bIML.setMaxWidth(150);
		bUML.setMaxWidth(150);
		bSML.setMaxWidth(150);
		
		bpD = new BorderPane();
		bpL = new BorderPane();
		VBox vbD = new VBox(10);
		VBox vbL = new VBox(10);
		vbL.setAlignment(Pos.CENTER);
		vbD.setAlignment(Pos.CENTER);
		
		GridPane gp = new GridPane();
		gp.setVgap(10);
		gp.setHgap(10);
		
		gp.add(tfID, 0, 0);
		gp.add(bID,1,0);
		gp.add(tfDD,0,1);
		gp.add(bDD,1,1);
		gp.add(tfSD,0,2);
		gp.add(bSD,1,2);
		gp.setAlignment(Pos.CENTER);
		HBox hbD = new HBox(10);
		hbD.getChildren().addAll(bPD,bUD,bLLD,bND);
		hbD.setAlignment(Pos.CENTER);
		
		vbD.getChildren().addAll(gp,taD,hbD);
		
		
		GridPane gpL = new GridPane();
		gpL.setVgap(10);
		gpL.setHgap(10);
		
		gpL.add(lDL, 0, 0);
		gpL.add(lLL,1,0);
		gpL.add(tfDL,0,1);
		gpL.add(tfDDL,1,1);
		gpL.add(bDL,2,1);
		gpL.add(tfIL, 0, 2);
		gpL.add(tfIDL,1,2);
		gpL.add(bIL,2,2);
		gpL.add(tfSLL,0,3);
		gpL.add(bSL,1,3);
		gpL.add(bNL,2,3);
		gpL.add(tfSML,0,4);
		gpL.add(bSML,1,4);
		gpL.add(bIML,2,4);
		
		gpL.setAlignment(Pos.CENTER);
		HBox hbL = new HBox(10);
		hbL.getChildren().addAll(bUL,bUML);
		hbL.setAlignment(Pos.CENTER);
		
		bID.setOnAction(e -> {
		    String districtName = tfID.getText();
		    if (districtName.isEmpty()) {
		        taD.setText("The TextField is Empty, Please Enter a Name of District.");
		        return;
		    }
		    // Check if the district already exists
		    NodeD current = firstD;
		    while (current != null) {
		        District currentDistrict = (District) current.getData();
		        if (currentDistrict.getDistrictName().equalsIgnoreCase(districtName)) {
		            taD.setText("District '"+districtName+"' already exists.");
		            tfID.clear();
		            return;
		        }
		        current = current.getNext();
		        if (current == firstD) // Break the loop if we've iterated over all nodes
		            break;
		    }
		    // If the district doesn't exist, add it to the list
		    District newDistrict = new District(districtName);
		    NodeD newNode = new NodeD(newDistrict);
		    if (firstD == null) {
		        firstD = newNode;
		        firstD.setNext(firstD);
		        firstD.setPrev(firstD);
		    } else {
		        NodeD last = firstD.getPrev();
		        last.setNext(newNode);
		        newNode.setPrev(last);
		        newNode.setNext(firstD);
		        firstD.setPrev(newNode);
		    }
		    taD.setText("District '"+districtName+"' Added Successfully");
		    count++;
		    tfID.clear();
		});

		
		bDD.setOnAction(e -> deleteDis(tfDD.getText()));
		bSD.setOnAction(e -> searchDistrict(tfSD.getText()));
		//bUD.setOnAction(e -> updateDis());
		
		vbL.getChildren().addAll(gpL,taL,hbL);
		
		bpD.setCenter(vbD);
		bpL.setCenter(vbL);
		
	}
	   public void readCSVFile(String filePath) {
	        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
	            String line;
	            boolean firstLine = true;
	            while ((line = br.readLine()) != null) {
	                if (firstLine) {
	                    firstLine = false;
	                    continue;
	                }
	               
	                String[] parts = line.split(",");
	                if (parts.length == 6) {
	                    String name = parts[0];
	                    String date = parts[1];
	                    int age = parts[2].isEmpty() ? random.nextInt(100) + 1 : Integer.parseInt(parts[2]);
	                    String loc = parts[3];
	                    String dis = parts[4];
	                    String gender = parts[5];
	                    Martyr martyr = new Martyr(name, date, age, loc, dis, gender);
	                    Location location = new Location(loc, martyr);
	                    District district = new District(dis, location);
	                    addDistrict(district);
	                    addLocation(location, district);
	                    addMartyr(martyr, district, location);
	                    
	                }
	            }
	        } catch (FileNotFoundException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }

	    public void addDistrict(District district) {
	        if (firstD == null) {
	            firstD = new NodeD(district);
	            firstD.setNext(firstD);
	            firstD.setPrev(firstD);
	            firstD.setNextLoc(null);
	            firstD.setNextLoc(null);
	        } else {
	            NodeD current = firstD;
	            do {
	                if (current.getData().equals(district)) {
	                    // District already exists, return or handle accordingly
	                    return;
	                }
	                current = current.getNext();
	            } while (current != firstD);
	            // District doesn't exist, add it to the circular linked list
	            NodeD newNode = new NodeD(district);
	            newNode.setNext(firstD);
	            newNode.setPrev(firstD.getPrev());
	            firstD.getPrev().setNext(newNode);
	            firstD.setPrev(newNode);
	            newNode.setNextLoc(null);
	            district.setFirstLocation(null);
	        }
	        count++;
	    }

	 // Add a location to the district
	    public void addLocation(Location location, District district) {
	        NodeD currentDis = firstD;
	        do {
	            if (currentDis.getData().equals(district)) {
	                NodeDS currentLoc = currentDis.getNextLoc();
	                NodeDS newLoc = new NodeDS(location);
	                if (currentLoc == null) {
	                    newLoc.setNext(newLoc); // Make it circular
	                    currentDis.setNextLoc(newLoc);
	                    district.setFirstLocation(newLoc);
	                } else {
	                    newLoc.setNext(currentLoc); // Insert new location before the current one
	                    district.getFirstLocation().setNext(newLoc); // Update circular link
	                    district.setFirstLocation(newLoc); // Update first location reference
	                }
	                return;
	            }
	            currentDis = currentDis.getNext();
	        } while (currentDis != firstD);
	    }


	    // Add a martyr to the location
	    public void addMartyr(Martyr martyr, District district, Location location) {
	        NodeD currentDis = firstD;
	        do {
	            if (currentDis.getData().equals(district)) {
	                NodeDS currentLoc = currentDis.getNextLoc();
	               do {
	                    if (currentLoc.getData().equals(location)) {
	                        NodeSS currentMar = location.getFirstMartyr();
	                        NodeSS newMar = new NodeSS(martyr);
	                        if (currentMar == null) {
	                            location.setFirstMartyr(newMar);
	                            newMar.setNext(newMar); // Make it circular
	                        } else {
	                            NodeSS lastMartyr = getLastMar(currentMar);
	                            lastMartyr.setNext(newMar);
	                            newMar.setNext(currentMar); // Make it circular
	                        }
	                        return;
	                    }
	                    currentLoc = currentLoc.getNext();
	                } while (currentLoc != district.getFirstLocation());
	                return; // Location not found in this district
	            }
	            currentDis = currentDis.getNext();
	        }while (currentDis != firstD);
	    }

	    // Helper method to get the last location in the list
	    private NodeDS getLastLoc(NodeDS current) {
	        while (current.getNext() != null && current.getNext() != current) {
	            current = current.getNext();
	        }
	        return current;
	    }

	    // Helper method to get the last martyr in the list
	    private NodeSS getLastMar(NodeSS current) {
	        while (current.getNext() != null && current.getNext() != current) {
	            current = current.getNext();
	        }
	        return current;
	    }

	    
	    public void insertDistrict(District district) {
	        NodeD newNode = new NodeD(district);
	        if (firstD == null) {
	            firstD = newNode;
	            firstD.setNext(firstD);
	            firstD.setPrev(firstD);
	        } else {
	            NodeD last = firstD.getPrev();
	            last.setNext(newNode);
	            newNode.setPrev(last);
	            newNode.setNext(firstD);
	            firstD.setPrev(newNode);
	        }
	        count++;
	    }
	    
	    public void deleteDis(String dis) {
	    	if (dis.isEmpty()) {
	    		taD.setText("The TextField is Empty , Please Enter a Name of District .");
		        return;
		    }
	    	if (firstD == null) {
	    		taD.setText("The List is Null");
			    return; // List is empty, nothing to delete
	    	}
	    	NodeD current = firstD;
			do {
				District currentDistrict = (District) current.getData();
			    if (currentDistrict.getDistrictName().equalsIgnoreCase(dis)) {
			    	if (count == 1)
			    		firstD = null;    // If there's only one node in the list
			    	else {
			    		NodeD prev = current.getPrev();
			            NodeD next = current.getNext();
			            prev.setNext(next);
			            next.setPrev(prev);
			            if (current == firstD)
			            	firstD = next;    // If deleting the first node, update the first reference
			    	}
			    	count--;
			    	taD.setText("District '"+tfDD.getText()+"' Deleted Successfully");
			    	tfDD.clear();
			    	return;
			    }
			    current = current.getNext();
			} while (current != firstD); // Loop until we reach the starting point again
			taD.setText("District "+dis+" Not Found");
	    	tfDD.clear();
	    }
	    
    public void sort(String dis) {
    	int totalMar = 0;
    	int totalMale= 0;
    	int totalFemale =0;
    	int avg;
    	int totalAge = 0;
    	String date;
    	
    	if (dis.isEmpty()) {
    		taD.setText("The TextField is Empty , Please Enter a Name of District .");
	        return;
	    }
    	NodeD current = firstD;
    	StringBuilder s = new StringBuilder();
    	do {
			District currentDistrict = (District) current.getData();
		    if (currentDistrict.getDistrictName().equalsIgnoreCase(dis)) {
		    	s.append("District :").append(dis).append("\n");
		    	NodeDS curLoc = current.getFirstLocation();
		    	while (curLoc != null) {
		    		NodeSS curMar = curLoc.getFirstMartyr();
		    		totalMar++;		
		    	}
		    }
		    else {
		    	taD.setText("District '"+dis+"' Not Found");
		    	tfDD.clear();
		    	return;
		    }
    	}while(current != firstD);
    }
  
    
    public void searchDistrict(String dis) {
        if (dis.isEmpty()) {
            taD.setText("Please enter the name of the district to search.");
            return;
        }

        NodeD districtNode = findDistrictNode(dis);
        if (districtNode != null) {
            District district = (District) districtNode.getData();
            calculateMartyrStatistics(district);
        } else {
            taD.setText("District '" + dis + "' not found.");
        }
    }

    private NodeD findDistrictNode(String dis) {
        NodeD current = firstD;
        do {
            District curDis = (District) current.getData();
            if (curDis.getDistrictName().equalsIgnoreCase(dis)) {
                return current;
            }
            current = current.getNext();
        } while (current != firstD);
        return null; // District not found
    }

    
    public void calculateMartyrStatistics(District district) {
        int totalMartyrs = 0;
        int maleMartyrs = 0;
        int femaleMartyrs = 0;
        int totalAge = 0;
        String date = null;
        NodeD currentDis = firstD;
        while (!currentDis.getData().equals(district)) {
            currentDis = currentDis.getNext();
            if (currentDis == firstD) {
                System.out.println("District not found.");
                return;
            }
        }
        NodeDS currentLocation = currentDis.getFirstLocation();
        if (currentLocation == null) {
            System.out.println("No locations in the district.");
            return;
        }

        NodeDS startingLocation = currentLocation;
        do {
            System.out.println("1111");
            Location location = (Location) currentLocation.getData();
            NodeSS currentMartyr = currentLocation.getFirstMartyr();
            
            if (currentMartyr == null) {
                System.out.println("No martyrs in this location.");
                currentLocation = currentLocation.getNext();
                continue;
            }

            do {
            	System.out.println("2222");
                Martyr martyr = (Martyr) currentMartyr.getData();
                totalMartyrs++;
                totalAge += martyr.getAge();
                if (martyr.getGender().equalsIgnoreCase("M")) {
                    maleMartyrs++;
                    System.out.println("3333");
                } else if (martyr.getGender().equalsIgnoreCase("F")) {
                    femaleMartyrs++;
                }
                currentMartyr = currentMartyr.getNext();
            } while (currentMartyr != currentLocation.getFirstMartyr()); // Check if we've reached the starting martyr

            currentLocation = currentLocation.getNext();
        } while (currentLocation != currentDis.getFirstLocation()); // Check if we've returned to the starting location

        // Calculate average age
        double averageAge = totalMartyrs == 0 ? 0 : (double) totalAge / totalMartyrs;

        // Display results
        String result = "Total number of martyrs: " + totalMartyrs + "\n" +
                        "Total number of male martyrs: " + maleMartyrs + "\n" +
                        "Total number of female martyrs: " + femaleMartyrs + "\n" +
                        "Average martyrs age: " +  averageAge;
        taD.setText(result);
    }


    public void printDistricts() {
        if (firstD == null) {
            System.out.println("No districts.");
            return;
        }
        NodeD current = firstD;
        do {
            System.out.println(current.getData());
            current = current.getNext();
        } while (current != firstD);
        System.out.println(count);
    }
}